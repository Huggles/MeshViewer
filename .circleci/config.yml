version: 2.1

orbs:
  slack: circleci/slack@3.4.2/*

commands:
  log_into_devhub:
    steps:
      - run:
          name: login into devhub
          command: |
            mkdir keys
            echo $HUB_SERVER_KEY_HEX | xxd -r -ps >> keys/hub.key
            openssl rsa -in keys/hub.key -check -noout
            sfdx force:auth:jwt:grant --clientid $HUB_CONSUMER_KEY --jwtkeyfile keys/hub.key --username $HUB_SFDC_USER --setdefaultdevhubusername -a hub
  log_into_test_org:
    steps:
      - run:
          name: login into test org
          command:
            sfdx force:auth:sfdxurl:store -f config/beta-test-org.sfdx-url -a beta_test_org


parameters:
  packageid:
    description: "The package id (starts with 0Ho). Copy it from the sfdx-project.json."
    type: string
    default: "0Ho0J000000k9bSSAQ"
  package_version_tag:
    description: "the package versionâ€™s tag"
    type: string
    default: ""
  packaging_scratch_org_definition_file:
    description: "the scratch org definition file used to build the package version. Should define all the right org shape/dependencies/features needed for the package"
    type: string
    default: "config/project-scratch-def.json"
  beta_test_scratch_org_definition_file:
    description: "the enterprise edition scratch org definition file used to install the beta. Should define all the right org shape/dependencies/features needed for installing the package"
    type: string
    default: "config/beta-test-scratch-def.json"
  build_wait:
    description: "the time in minutes the version create command waits until to return"
    type: integer
    default: 60
  username_beta_test:
    description: "the username for the beta test scratch org that can be used to test. Has admin rights and company.info admin rights"
    type: string
    default: "test@companyinfo.beta.test"
  email_beta_test:
    description: "the email for the beta test user"
    type: string
    default: "jaap.branderhorst@appsolutely.nl"


jobs:
  run_apex_tests:
    docker:
      - image: appsolutely/sfdx_circleci_container:latest
    environment:
      SFDX_MDAPI_TEMP_DIR: /root/project/metadata
      SFDX_LOG_LEVEL: trace
    steps:
      - checkout
      - log_into_devhub
      - run:
          name: create scratch org
          command:
            sfdx force:org:create -s -f config/project-scratch-def.json -a circle_build_$CIRCLE_BUILD_NUM -d 1 -w 10
      - run:
          name: push source to scratch org
          command:
            sfdx force:source:push -u circle_build_$CIRCLE_BUILD_NUM
      - run:
          name: run apex tests
          command: |
            mkdir -p tests/junit
            sfdx force:apex:test:run -d tests/junit -r junit -w 20
      - store_test_results:
          path: tests/junit
      - store_artifacts:
          path: tests/junit
      - run:
          name: delete scratch org
          command: |
            sfdx force:org:delete -u circle_build_$CIRCLE_BUILD_NUM -p
      - run:
          name: Compress Metadata Artifacts
          when: always
          command: |
            tar -cvf metadata.tar /root/project/metadata
      - run:
          name: Compress sfdx log
          when: always
          command: |
            tar -cvf sfdx_log.tar /root/.sfdx/sfdx.log
      - store_artifacts:
          path: metadata.tar
          destination: metadata
      - store_artifacts:
          path: sfdx_log.tar
          destination: sfdx-log
  
  create_and_install_beta:
    docker:
      - image: appsolutely/sfdx_circleci_container:latest
    environment:
      BASH_ENV: ~/.env
    steps:
      - checkout
      - log_into_devhub
      - run:
          name: create beta package version
          command: |
            packageversionid=$(sfdx force:package:version:create --package << pipeline.parameters.packageid >> -x --codecoverage --definitionfile << pipeline.parameters.packaging_scratch_org_definition_file >> --wait << pipeline.parameters.build_wait >> --tag "commit: $CIRCLE_SHA1" --json | jq .result.SubscriberPackageVersionId)
            packageversionid="${packageversionid%\"}"
            packageversionid="${packageversionid#\"}"
            echo 'export packageversionid="'$packageversionid'"' >> $BASH_ENV
      -run:
          name: get version number
          command: |
            versionnumber=$(sfdx force:package:version:report -p $packageversionid --json | jq .result.Version)
            versionnumber="${versionnumber%\"}"
            versionnumber="${versionnumber#\"}"
            echo 'export versionnumber="'$versionnumber'"' >> $BASH_ENV
      - run:
          name: create beta test scratch org
          command: |
            sfdx force:org:create -s -f << pipeline.parameters.beta_test_scratch_org_definition_file >> -a test_beta_$versionnumber -d 30 -w 10
      - run:
          name: install
          command: |
            sfdx force:package:install --package $packageversionid --noprompt --publishwait 5 --targetusername test_circle_build_$CIRCLE_BUILD_NUM -w 30
      - run:
          name: create admin user with fixed name and store the loginurl, username and password
          command: |
            sfdx force:user:create -a test-user -u test_beta_$versionnumber username=<< pipeline.parameters.username_beta_test >> email=<< pipeline.parameters.username_beta_test >> generatepassword=true -f config/companyinfo-admin-user-def.json
            username=$(sfdx force:user:display -u test-user --verbose --json | jq .result.username)
            username="${username%\"}"
            username="${username#\"}"
            echo $username > test-beta-login.txt
            password=$(sfdx force:user:display -u test-user --verbose --json | jq .result.password)
            password="${password%\"}"
            password="${password#\"}"
            echo $password >> test-beta-login.txt
            instanceUrl=$(sfdx force:user:display -u test-user --verbose --json | jq .result.instanceUrl)
            instanceUrl="${instanceUrl%\"}"
            instanceUrl="${instanceUrl#\"}"
            echo $instanceUrl >> test-beta-login.txt
      - store-artifacts:
          path: test-beta-login.txt
          destination: test-beta-login
      - slack/notify:
          mentions: 'UTDU2GWGJ'
          message: 'new scratch org with beta package available. Download the test-beta-login artifact to use as login'
  
  upgrade_to_managed:
    docker:
      - image: appsolutely/sfdx_circleci_container:latest
    steps:
      - checkout
      - log_into_devhub
      - run:
          name: get latest package version and upgrade to managed package
          command: |
            packageversionid=$(sfdx force:package:version:list --createdlastdays 0 --packages "<< pipeline.parameters.packageid >>" --orderby BuildNumber --json | jq .result[-1].SubscriberPackageVersionId)
            packageversionid="${packageversionid%\"}"
            packageversionid="${packageversionid#\"}"
            sfdx force:package:version:promote --package $packageversionid --noprompt
#      - run:
#          name: merge into master
#          command: |
#            git checkout master
#            git merge $CIRCLE_BRANCH
#            git push origin master
#            git tag -a v$PACKAGE_MAJOR_VERSION.$CIRCLE_BUILD_NUM -m "$PACKAGE_VERSION_NAME v$PACKAGE_MAJOR_VERSION.$CIRCLE_BUILD_NUM"
#            git push origin --tags

workflows:
  version: 2
  feature_branch_push:
    jobs:
      - run_apex_tests:
          context: org-global
          filters:
            branches:
              only: /feature\/.*/
  
  develop_branch_push:
    jobs:
      - run_apex_tests:
          context: org-global
          filters:
            branches:
              only: 
                - develop
      - create_and_install_beta:
          context: org-global
          requires:
            - run_apex_tests
  
  release_branch_push:
    jobs:
      - run_apex_tests:
          context: org-global
          filters:
            branches:
              only: /release\/.*/
#      - build_packaging2_beta:
#          context: org-global
#          requires:
#            - run_apex_tests
#      - install_packaging2_beta:
#          context: org-global
#          requires:
#            - build_packaging2_beta
#      - approve_upgrade_to_managed:
#          type: approval
#          requires:
#            - install_packaging2_beta
#      - upgrade_to_managed:
#          context: org-global
#          requires:
#            - approve_upgrade_to_managed


