version: 2.1

orbs:
  slack: circleci/slack@3.4.2

commands:
  log_into_devhub:
    description: logs in into the devhub using the sfdx url in the given file
    parameters:
      sfdx_url_file:
        description: the relative path to the file containing the sfdx url
        default: .circleci/dev_hub_sfdx_url.txt
        type: string
    steps:
      - run:
          name: login into devhub
          command: |
            sfdx force:auth:sfdxurl:store -f << parameters.sfdx_url_file >> -d -a hub

  create_user:
    description: creates a user and stores the credentials and login in a file. Assumes the user is logged in into a default dev hub
    parameters:
      org_username:
        description: the username or alias of the org to create users for
        type: string
      alias:
        description: the alias to create
        type: string
      email:
        description: the email address of the newly created user
        type: string
      path_to_user_definition:
        description: the path to the user definition
        type: string
      output_file_name:
        description: the file name to store the credentials of the created user
        type: string
    steps:
      - run:
          name: create user
          command: |
            sfdx force:user:create -u << parameters.org_username >> -a << parameters.alias >> -f << parameters.path_to_user_definition >> generatepassword=true email=<< parameters.email >>
            sfdx force:org:display -u << parameters.alias >> --json | jq '{username: .result.username, password: .result.password, instanceUrl: .result.instanceUrl}' >> << parameters.output_file_name >>
      - store_artifacts:
          path: << parameters.output_file_name >>

  setup_github:
    description: sets everything up so a commit to github can take place.
    parameters:
      username:
        description: github username
        type: string
        default: CircleCI
      email:
        description: github email. Must be of a github user
        type: string
        default: jaap.branderhorst@appsolutely.nl
      fingerprint:
        description: the fingerprint of the SSH key. The key should have write access to github
        type: string
        default: << pipeline.parameters.github.fingerprint >>
    steps:
      - add_ssh_keys:
          fingerprints:
            - "<< parameters.fingerprint >>"
      - run:
          name: setup github
          command: |
            git config user.email "<< parameters.email >>"
            git config user.name "<< parameters.username >>"

  create_package_version:
    description: creates a new package version and tags it in github. Assumes the user is logged in into a default dev hub against which the namespace of the package is registered. Assumes the definition file is defined in the sfdx-project.json. Assumes a github ssh key has been added in the job calling this command
    parameters:
      package:
        description: the package alias or package id for which a package version needs to be created
        type: string
      skipvalidation:
        description: --skipvalidation if validation needs to be skipped when creating a new beta package. Otherwise empty (default)
        default: ""
        type: string
      codecoverage:
        description: -c if codecoverage is needed. Otherwise empty (default)
        default: ""
        type: string
      wait:
        description: the time to wait until the package create command returns in minutes.
        default: 60
        type: integer
    steps:
      - run:
          name: create beta package version
          no_output_timeout: 1.5h
          command: |
            packageversionid=$(sfdx force:package:version:create --package << parameters.package >> << parameters.codecoverage >> -x --wait << parameters.build_wait >> --tag "commit: $CIRCLE_SHA1" --branch "$CIRCLE_BRANCH" << parameters.skipvalidation >> | jq -r .result.SubscriberPackageVersionId)
            versionnumber=$(sfdx force:package:version:report --package $packageversionid --json | jq -r .result.Version)
            setup_github
            git tag -a $versionnumber -m "tagging version $versionnumber [ci skip]"
            git push $versionnumber

parameters:
  packageid:
    description: "The package id (starts with 0Ho). Copy it from the sfdx-project.json."
    type: string
    default: "0Ho0J000000k9bSSAQ"
  github_fingerprint:
    description: The fingerprint of the github ssh key to write to github. See https://blog.jdblischak.com/posts/circleci-ssh/ how to set this up.
    type: string
    default: 8a:d3:5b:00:d5:da:25:92:36:00:fe:49:85:15:69:48
  packaging_scratch_org_definition_file:
    description: "the scratch org definition file used to build the package version. Should define all the right org shape/dependencies/features needed for the package"
    type: string
    default: "config/package-scratch-def.json"
  beta_test_scratch_org_definition_file:
    description: "the enterprise edition scratch org definition file used to install the beta. Should define all the right org shape/dependencies/features needed for installing the package"
    type: string
    default: "config/beta-test-scratch-def.json"
  build_wait:
    description: "the time in minutes the version create command waits until to return"
    type: integer
    default: 60
  email_beta_test:
    description: "the email for the beta test user"
    type: string
    default: "johan.van.den.hoek@appsolutely.nl"


jobs:
  run_apex_tests:
    description: Checks out the metadata, creates a new scratch org with the packaging scratch org def, pushes all metadata and runs all apex tests
    docker:
      - image: appsolutely/sfdx_circleci_container:latest
    resource_class: small
    environment:
      SFDX_MDAPI_TEMP_DIR: /root/project/metadata
      SFDX_LOG_LEVEL: debug
    steps:
      - checkout
      - log_into_devhub
      - run:
          name: create scratch org
          command:
            sfdx force:org:create -s -f << pipeline.parameters.packaging_scratch_org_definition_file >> -a circle_build_$CIRCLE_BUILD_NUM -d 1 -w 10
      - run:
          name: push source to scratch org
          command:
            sfdx force:source:push -u circle_build_$CIRCLE_BUILD_NUM
      - run:
          name: run apex tests
          command: |
            mkdir -p tests/junit
            sfdx force:apex:test:run -d tests/junit -r junit -w 20
      - store_test_results:
          path: tests/junit
      - store_artifacts:
          path: tests/junit
      - run:
          name: delete scratch org
          command: |
            sfdx force:org:delete -u circle_build_$CIRCLE_BUILD_NUM -p
      - run:
          name: Compress Metadata Artifacts
          when: always
          command: |
            tar -cvf metadata.tar /root/project/metadata
      - run:
          name: Compress sfdx log
          when: always
          command: |
            tar -cvf sfdx_log.tar /root/.sfdx/sfdx.log
      - store_artifacts:
          path: metadata.tar
          destination: metadata
      - store_artifacts:
          path: sfdx_log.tar
          destination: sfdx-log
  
  create_beta:
    description: checks out the metadata and creates a beta package
    parameters:
      skipvalidation:
        description: "--skipvalidation if validation needs to be skipped when creating a new beta package. Otherwise empty (default)"
        default: ""
        type: string
      codecoverage:
        description: "-c if codecoverage is needed. Otherwise empty (default)"
        default: ""
        type: string
    docker:
      - image: appsolutely/sfdx_circleci_container:latest
    resource_class: small
    environment:
      SFDX_MDAPI_TEMP_DIR: /root/project/metadata
      SFDX_LOG_LEVEL: debug
    steps:
      - checkout
      - log_into_devhub
      - run:
          name: create beta package version
          no_output_timeout: 1.5h
          command: |
            sfdx force:package:version:create --package << pipeline.parameters.packageid >> << parameters.codecoverage >> -x -f << pipeline.parameters.packaging_scratch_org_definition_file >> --wait << pipeline.parameters.build_wait >> --tag "commit: $CIRCLE_SHA1" << parameters.skipvalidation >>
      - store_artifacts:
          path: metadata.tar
          destination: metadata
      - store_artifacts:
          path: sfdx_log.tar
          destination: sfdx-log

  install_beta:
    description: installs the beta that has as tag the current commit
    docker:
      - image: appsolutely/sfdx_circleci_container:latest
    resource_class: small
    environment:
      SFDX_MDAPI_TEMP_DIR: /root/project/metadata
      SFDX_LOG_LEVEL: debug
    steps:
      - checkout
      - log_into_devhub
      - run:
          name: create beta test scratch org
          command: |
            sfdx force:org:create -s -f << pipeline.parameters.beta_test_scratch_org_definition_file >> -d 30 -w 10 -a beta-test --nonamespace
      - run:
          name: install
          command: |
            packageversionid=$(sfdx force:package:version:list  --verbose --json | jq -r --arg TAG "commit: $CIRCLE_SHA1" '.result[] | select(.Tag==$TAG) | .SubscriberPackageVersionId')
            sfdx force:package:install --package $packageversionid --noprompt --publishwait 5 -w 30
      - create_user:
          org_username: beta-test
          alias: test-admin
          email: << pipeline.parameters.email_beta_test >>
          path_to_user_definition: config/companyinfo-admin-user-def.json
          output_file_name: test-admin-credentials.txt
      - create_user:
          org_username: beta-test
          alias: test-sales
          email: << pipeline.parameters.email_beta_test >>
          path_to_user_definition: config/companyinfo-sales-user-def.json
          output_file_name: test-sales-credentials.txt
      - run:
          name: delete scratch org
          when: on_fail
          command: |
            sfdx force:org:delete
      - store_artifacts:
          path: metadata.tar
          destination: metadata
      - store_artifacts:
          path: sfdx_log.tar
          destination: sfdx-log
      - slack/notify:
          message: "new scratch org with beta package available. Download the credentials to get access"
  
  upgrade_to_managed:
    docker:
      - image: appsolutely/sfdx_circleci_container:latest
    resource_class: small
    steps:
      - checkout
      - log_into_devhub
      - run:
          name: get latest package version and upgrade to managed package
          command: |
            packageversionid=$(sfdx force:package:version:list --verbose --json | jq -r --arg TAG "commit: $CIRCLE_SHA1" '.result[] | select(.Tag==$TAG) | .SubscriberPackageVersionId')
            sfdx force:package:version:promote --package $packageversionid --noprompt
#      - run:
#          name: merge into master
#          command: |
#            git checkout master
#            git merge $CIRCLE_BRANCH
#            git push origin master
#            git tag -a v$PACKAGE_MAJOR_VERSION.$CIRCLE_BUILD_NUM -m "$PACKAGE_VERSION_NAME v$PACKAGE_MAJOR_VERSION.$CIRCLE_BUILD_NUM"
#            git push origin --tags

workflows:
  version: 2.1
  feature_branch_push:
    jobs:
      - run_apex_tests:
          context: org-global
          filters:
            branches:
              only: /feature\/.*/
  
  develop_branch_push:
    jobs:
      - run_apex_tests:
          context: org-global
          filters:
            branches:
              only: 
                - develop
      - create_beta:
          context: org-global
          requires:
            - run_apex_tests
      - install_beta:
          context: org-global
          requires:
            - create_beta
  
  release_branch_push:
    jobs:
      - run_apex_tests:
          context: org-global
          filters:
            branches:
              only: /release\/.*/
      - create_beta:
          codecoverage: -c
          context: org-global
          requires:
            - run_apex_tests
      - install_beta:
          context: org-global
          requires:
            - create_beta
      - approve_upgrade_to_managed:
          type: approval
          requires:
            - install_beta
      - upgrade_to_managed:
          context: org-global
          requires:
            - approve_upgrade_to_managed




