version: 2.1

commands:
  log_into_devhub:
    steps:
      - run:
          name: login into devhub
          command: |
            mkdir keys
            echo $HUB_SERVER_KEY_HEX | xxd -r -ps >> keys/hub.key
            openssl rsa -in keys/hub.key -check -noout
            sfdx force:auth:jwt:grant --clientid $HUB_CONSUMER_KEY --jwtkeyfile keys/hub.key --username $HUB_SFDC_USER --setdefaultdevhubusername -a hub

parameters:
  package:
    description: "The package id (starts with 0Ho) or package alias of the package. Copy it from the sfdx-project.json."
    type: string
    default: "Company.info for Sales"
  package_version_tag:
    description: "the package version’s tag"
    type: string
    default: ""
  packaging_scratch_org_definition_file:
    description: "the scratch org definition file used to build the package version. Should define all the right org shape/dependencies/features needed for the package"
    type: string
    default: "config/project-scratch-def.json"
  build_wait:
    description: "the time in minutes the version create command waits until to return"
    type: integer
    default: 20

jobs:
  run_apex_tests:
    docker:
      - image: appsolutely/sfdx_circleci_container:latest
    steps:
      - checkout
      - log_into_devhub
      - run:
          name: create scratch org
          command:
            sfdx force:org:create -s -f config/project-scratch-def.json -a circle_build_$CIRCLE_BUILD_NUM
      - run:
          name: push source to scratch org
          command:
            sfdx force:source:push -u circle_build_$CIRCLE_BUILD_NUM
      - run:
          name: run apex tests
          command: |
            mkdir -p tests/junit
            sfdx force:apex:test:run -d tests/junit -r junit -w 20
      - store_test_results:
          path: tests/junit
      - store_artifacts:
          path: tests/junit
      - run:
          name: delete scratch org
          when: always
          command: |
            sfdx force:org:delete -u circle_build_$CIRCLE_BUILD_NUM -p
  deploy_to_packaging1_org:
    docker:
      - image: appsolutely/sfdx_circleci_container:latest
    steps:
      - checkout
      - run:
          name: convert to mdapi format
          command: |
            sfdx force:source:convert --outputdir mdapi_output_dir --packagename $PACKAGE_2_NAME
      - run:
          name: add postinstall script
          command: |
            if [[ ! -z "$POST_INSTALL_SCRIPT" ]] ; then
              sed -i 's/<fullName>/<postInstallClass>'"$POST_INSTALL_SCRIPT"'<\/postInstallClass><fullName>/' mdapi_output_dir/package.xml
            fi
      - run:
          name: add uninstall script
          command: |
            if [[ ! -z "$UNINSTALL_SCRIPT" ]] ; then
              sed -i 's/<fullName>/<uninstallClass>'"$UNINSTALL_SCRIPT"'<\/uninstallClass><fullName>/' mdapi_output_dir/package.xml
            fi
      - run:
          name: add configuration link
          command: |
            if [[ ! -z "$CONFIGURATION_LINK" ]] ; then
              sed -i 's/<fullName>/<setupWeblink>'"$CONFIGURATION_LINK"'<\/setupWeblink><fullName>/' mdapi_output_dir/package.xml
            fi
      - run:
          name: login into packaging org
          command: |
            mkdir keyspackaging
            echo $PACKAGING_2_SERVER_KEY_HEX | xxd -r -ps >> keyspackaging/packaging.key
            openssl rsa -in keyspackaging/packaging.key -check -noout
            sfdx force:auth:jwt:grant --clientid $PACKAGING_2_CONSUMER_KEY --jwtkeyfile keyspackaging/packaging.key --username $PACKAGING_2_SFDC_USER -a packaging_org
      - run:
          name: deploy the metadata to the packaging org
          command: |
            sfdx force:mdapi:deploy --deploydir mdapi_output_dir --targetusername $PACKAGING_2_SFDC_USER --wait 5
  build_packaging2_beta:
    docker:
      - image: appsolutely/sfdx_circleci_container:latest
    steps:
      - checkout
      - log_into_devhub
      - run:
          name: create beta package version
          command: |
            sfdx force:package:version:create --package "<< pipeline.parameters.package >>" --installationkeybypass --definitionfile << pipeline.parameters.packaging_scratch_org_definition_file >> --wait << pipeline.parameters.build_wait >> --tag "commit: $CIRCLE_SHA1"
  install_packaging2_beta:
    docker:
      - image: appsolutely/sfdx_circleci_container:latest
    environment:
      BASH_ENV: ~/.env
    steps:
      - checkout
      - log_into_devhub
      - run:
          name: create scratch org
          command: |
            sfdx force:org:create -s -f << pipeline.parameters.packaging_scratch_org_definition_file >> -a test_circle_build_$CIRCLE_BUILD_NUM
      - run:
          name: get latest package version and install
          command: |
            packageversionid=$(sfdx force:package:version:list --createdlastdays 0 --packages "<< pipeline.parameters.package >>" --orderby BuildNumber --json | jq .result[-1].SubscriberPackageVersionId)
            packageversionid="${packageversionid%\"}"
            packageversionid="${packageversionid#\"}"
            sfdx force:package:install --package packageversionid --noprompt --publishwait 5 --targetusername test_circle_build_$CIRCLE_BUILD_NUM
      - run:
          name: delete scratch org
          when: always
          command: |
            sfdx force:org:delete -u test_circle_build_$CIRCLE_BUILD_NUM -p


  #      - run:
  #          name: create scratch org
  #          command:
  #            sfdx force:org:create -s -f config/project-scratch-def.json -a $PACKAGE_VERSION_NAME
  #      - run:
  #          name: install beta managed package
  #          # using source so the install.sh script can use the env variables set in the build environment and this script
  #          command: |
  #
  upgrade_to_managed:
    docker:
      - image: appsolutely/sfdx_circleci_container:latest
    steps:
      - log_into_devhub
      - run:
          name: get latest package version and upgrade to managed package
          command: |
            packageversionid=$(sfdx force:package:version:list --createdlastdays 0 --packages "<< pipeline.parameters.package >>" --orderby BuildNumber --json | jq .result[-1].SubscriberPackageVersionId)
            packageversionid="${packageversionid%\"}"
            packageversionid="${packageversionid#\"}"
            sfdx force:package:version:promote --package $packageversionid
#      - run:
#          name: merge into master
#          command: |
#            git checkout master
#            git merge $CIRCLE_BRANCH
#            git push origin master
#            git tag -a v$PACKAGE_MAJOR_VERSION.$CIRCLE_BUILD_NUM -m "$PACKAGE_VERSION_NAME v$PACKAGE_MAJOR_VERSION.$CIRCLE_BUILD_NUM"
#            git push origin --tags

workflows:
  version: 2
  deploy_test_feature:
    jobs:
      - run_apex_tests:
          context: org-global
          filters:
            branches:
              only: /feature\/.*/
  deploy_test_develop:
    jobs:
      - run_apex_tests:
          context: org-global
          filters:
            branches:
              only: 
                - develop
  deploy_test_build_package_test_package_release:
    jobs:
      - run_apex_tests:
          context: org-global
          filters:
            branches:
              only: /release\/.*/
      - deploy_to_packaging1_org:
          context: org-global
          requires:
            - run_apex_tests
      - build_packaging2_beta:
          context: org-global
          requires:
            - run_apex_tests
      - install_packaging2_beta:
          context: org-global
          requires:
            - build_packaging2_beta
      - approve_upgrade_to_managed:
          type: approval
          requires:
            - install_packaging2_beta
      - upgrade_to_managed:
          context: org-global
          requires:
            - approve_upgrade_to_managed


#  apex_tests-beta_package-release:
#    jobs:
#      - run_apex_tests:
#          context: org-global
#      - deploy_to_packaging1_org:
#          context: org-global
#          requires:
#            - run_apex_tests
#          filters:
#            branches:
#              only: /release\/.*/
#      - build_packaging2_beta:
#          context: org-global
#          requires:
#            - run_apex_tests
#          filters:
#            branches:
#              only: /release\/.*/
#      - install_packaging2_beta:
#          context: org-global
#          requires:
#            - build_packaging2_beta
#          filters:
#            branches:
#              only: /release\/.*/
#      - hold_before_build_managed:
#          context: org-global
#          type: approval
#          requires:
#            - install_packaging2_beta
#          filters:
#            branches:
#              only:
#                - /release\/.*/
#            tags:
#              only:
#                - /v[0-9]+(\.[0-9]+)+/
#      - create_managed_package:
#          context: org-global
#          requires:
#            - hold_before_build_managed
#          filters:
#            branches:
#              only:
#                - /release\/.*/
#            tags:
#              only:
#                - /v[0-9]+(\.[0-9]+)+/
